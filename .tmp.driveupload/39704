<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests" />
    <title>Star Images</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9" crossorigin="anonymous">
    <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>⭐️</text></svg>">
</head>
<body>
    <div style="padding-left: 30px; padding-right: 30px;">
        <h1 class="text-center" style="padding-top: 20px;">Images of the Stars in the List of IAU-approved Star Names</h1>
        <h3 class="text-center" style="padding-bottom: 20px;">Images shown were retrieved from SIMBAD/DSS2. Some of the names of the stars have been replaced with names that could be found in the SIMBAD/DSS database. As of January 2021, these are the 451 stars in the list.</h3>
        <div class="text-center" style="padding-bottom: 30px;">
            <a href="./StarPhotos.zip" target="_blank" rel="noreferer noopener"><button type="button" class="btn btn-lg btn-primary"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-download" viewBox="0 0 16 16">
                <path d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5z"/>
                <path d="M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3z"/>
            </svg> Download All Images</button></a>
        </div>
    </div>
    <div class="container" id="images">
        <p>Images loading!</p>
    </div>
    <footer class="footer" style="padding-left: 20px; padding-bottom: 20px;">
        Website made by <a href="https://jay-ding.pages.dev">Jaymin Ding</a> in 2023.
    </footer>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm" crossorigin="anonymous" crossorigin></script>
    <script>
        window.mobileCheck = () => {
            let check = false;
            (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);
            return check;
        };
        star_list = ['Absolutno', 'Acamar', 'Achernar', 'Achird', 'Acrab', 'Acrux', 'Acubens', 'Adhafera', 'Adhara', 'Adhil', 'Epsilon Tauri', 'Ainalrami', 'Aladfar', 'Alasia', 'Albaldah', 'Albali', 'Albireo', 'Alchiba', 'Alcor', 'Alcyone', 'Aldebaran', 'Alderamin', 'Aldhanab', 'Aldhibah', 'Aldulfin', 'Alfirk', 'Algedi', 'Algenib', 'Algieba', 'Algol', 'Algorab', 'Alhena', 'Alioth', 'Aljanah', 'Alkaid', 'Alkalurops', 'Alkaphrah', 'Alkarab', 'Alkes', 'Almaaz', 'Almach', 'Alnair', 'Alnasl', 'Alnilam', 'Alnitak', 'Alniyat', 'Alphard', 'Alphecca', 'Alpheratz', 'Alpherg', 'Alrakis', 'Alrescha', 'Alruba', 'Alsafi', 'Alsciaukat', 'Alsephina', 'Alshain', 'Alshat', 'Altair', 'Altais', 'Alterf', 'Aludra', 'Alula Australis', 'Alula Borealis', 'Alya', 'Alzirr', 'Amadioha', 'Amansinaya', 'Anadolu', 'Ancha', 'Angetenar', 'Aniara', 'Ankaa', 'Anser', 'Antares', 'Arcalis', 'Arcturus', 'Arkab Posterior', 'Arkab Prior', 'Arneb', 'Ascella', 'Asellus Australis', 'Asellus Borealis', 'Ashlesha', 'Aspidiske', 'Asterope', 'Atakoraka', 'Athebyne', 'Atik', 'Atlas', 'Atria', 'Avior', 'Axolotl', 'Ayeyarwady', 'Azelfafage', 'Azha', 'Azmidi', 'Baekdu', "Barnard's Star", 'Baten Kaitos', 'Beemim', 'Beid', 'Belel', 'Bellatrix', 'Berehynia', 'Betelgeuse', 'Bharani', 'Bibha', 'Biham', 'Bosona', 'Botein', 'Brachium', 'Bubup', 'Buna', 'Bunda', 'Belenos', 'Canopus', 'Capella', 'Caph', 'Castor', 'Castula', 'Cebalrai', 'Ceibo', 'Celaeno', 'Cervantes', 'Chalawan', 'Chamukuy', 'Chaophraya', 'Chara', 'Chason', 'Chechia', 'Chertan', 'Citadelle', 'Citala', 'Cocibolca', 'Copernicus', 'Cor Caroli', 'Cujam', 'Cursa', 'Dabih', 'Dalim', 'Deneb', 'Deneb Algedi', 'Denebola', 'Diadem', 'Dingolay', 'Diphda', 'Diya', 'Dofida', 'Dombay', 'Dschubba', 'Dubhe', 'Dziban', 'Diwo', 'Ebla', 'Edasich', 'Electra', 'Elgafar', 'Elkurud', 'Elnath', 'Eltanin', 'Emiw', 'Enif', 'Errai', 'Fafnir', 'Fang', 'Fawaris', 'Felis', 'Felixvarela', 'Flegetonte', 'Fomalhaut', 'Formosa', 'Franz', 'Fulu', 'Fumalsamakah', 'Funi', 'Furud', 'Fuyue', 'Gacrux', 'Gakyid', 'Geminga', 'Giausar', 'Gienah', 'Ginan', 'Gloas', 'Gomeisa', 'Grumium', 'Gudja', 'Gumala', 'Guniibuu', 'Hadar', 'Haedus', 'Hamal', 'Hassaleh', 'Hatysa', 'Helvetios', 'Heze', 'Hoggar', 'Homam', 'Horna', 'Hunahpu', 'Hunor', 'Iklil', 'Illyrian', 'Imai', 'Inquill', 'Intan', 'Intercrus', 'Irena', 'Itonda', 'Izar', 'Jabbah', 'Jishui', 'Kaffaljidhma', 'Kalausi', 'Kamuy', 'Kang', 'Karaka', 'Kaus Australis', 'Kaus Borealis', 'Kaus Media', 'Kaveh', 'Keid', 'Khambalia', 'Kitalpha', 'Kochab', 'Koeia', 'Koit', 'Kornephoros', 'Kraz', 'Kurhah', 'La Superba', 'Larawag', 'Lerna', 'Lesath', 'Libertas', 'Lich', 'Liesma', 'Lilii Borea', 'Lionrock', 'Lucilinburhuc', 'Lusitania', 'Maasym', 'Macondo', 'Mago', 'Mahasim', 'Mahsati', 'Maia', 'Malmok', 'Marfik', 'Markab', 'Markeb', 'Marsic', 'Matar', 'HAT-P-21', 'Mebsuta', 'Megrez', 'Meissa', 'Mekbuda', 'Meleph', 'Menkalinan', 'Menkar', 'Menkent', 'Menkib', 'Merak', 'Merga', 'Meridiana', 'Merope', 'Mesarthim', 'Miaplacidus', 'Mimosa', 'Minchir', 'Minelauva', 'Mintaka', 'Mira', 'Mirach', 'Miram', 'Mirfak', 'Mirzam', 'Misam', 'Mizar', 'Moldoveanu', 'Montuno', 'Morava', 'Moriah', 'Mothallah', 'Mouhoun', 'Mpingo', 'Muliphein', 'Muphrid', 'Muscida', 'Musica', 'Muspelheim', 'Marohu', 'Monch', 'Nahn', 'Naledi', 'Naos', 'Nashira', 'Natasha', 'Nekkar', 'Nembus', 'Nenque', 'Nervia', 'Nihal', 'Nikawiy', 'Nosaxa', 'Nunki', 'Nusakan', 'Nushagak', 'Nyamien', 'Nasti', 'Ogma', 'Okab', 'Paikauhale', 'Parumleo', 'Peacock', 'Petra', 'Phact', 'Phecda', 'Pherkad', 'Phoenicia', 'Piautos', 'Pincoya', 'Pipirima', 'Pipoltr', 'Pleione', 'Poerava', 'Polaris', 'Polaris Australis', 'Polis', 'Pollux', 'Porrima', 'Praecipua', 'Prima Hyadum', 'Procyon', 'Propus', 'Proxima Centauri', 'Epsilon Eridani', 'Rana', 'Rapeto', 'Rasalas', 'Rasalgethi', 'Rasalhague', 'Rastaban', 'Regulus', 'Revati', 'Rigel', 'Rigil Kentaurus', 'Rosaliadecastro', 'Rotanev', 'Ruchbah', 'Rukbat', 'Sabik', 'Saclateni', 'Sadachbia', 'Sadalbari', 'Sadalmelik', 'Sadalsuud', 'Sadr', 'Sagarmatha', 'Saiph', 'Salm', 'Sansuna', 'Sargas', 'Sarin', 'Sceptrum', 'Scheat', 'Schedar', 'Secunda Hyadum', 'Segin', 'Seginus', 'Sham', 'Shama', 'Sharjah', 'Shaula', 'Sheliak', 'Sheratan', 'Sika', 'Sirius', 'Situla', 'Skat', 'Solaris', 'Spica', 'Sterrennacht', 'Stribor', 'Sualocin', 'Subra', 'Suhail', 'Sulafat', 'Syrma', 'Samaya', 'Tabit', 'Taika', 'Taiyangshou', 'Taiyi', 'Talitha', 'Tangra', 'Tania Australis', 'Tania Borealis', 'Tapecue', 'Tarazed', 'Tarf', 'Taygeta', 'Tegmine', 'Tejat', 'Terebellum', 'Tevel', 'Theemin', 'Thuban', 'Tiaki', 'Tianguan', 'Tianyi', 'Timir', 'Tislit', 'Titawin', 'Tojil', 'Toliman', 'Tonatiuh', 'Torcular', 'Tuiren', 'Tupi', 'Tupa', 'Tureis', 'Ukdah', 'Uklun', 'Unukalhai', 'Unurgunite', 'Uruk', 'Vega', 'Veritate', 'Vindemiatrix', 'Wasat', 'Wazn', 'Wezen', 'Wurren', 'Xamidimura', 'Xihe', 'Xuange', 'Yed Posterior', 'Yed Prior', 'Yildun', 'Zaniah', 'Zaurak', 'Zavijava', 'Zhang', 'Zibal', 'Zosma', 'Zubenelgenubi', 'Zubenelhakrabi', 'Zubeneschamali'];
        console.log(star_list.length);
        for (let i = 0; i < star_list.length; i++) {
            star_list[i] = star_list[i].normalize('NFD').replace(/[\u0300-\u036f]/g, "");
        }
        star_list.sort();
        let images = document.getElementById('images');
        images.innerHTML = '';
        // For mobile do one image per row
    //         for (let i = 0; i < star_list.length; i += 1) {
    //             let row = document.createElement('div');
    //             row.classList.add('row');
    //             for (let j = 0; j < 1; j++) {
    //                 if (i + j < star_list.length) {
    //                     let col = document.createElement('div');
    //                     let button = document.createElement('button');
    //                     button.id = 'div' + star_list[i + j].replace(" ", "").replace("'", "");
    //                     button.style.backgroundColor = 'transparent';
    //                     button.style.border = 'none';
    //                     // Function to fetch data from the SIMBAD database based on star name
    //                     async function fetchSimbadData(starName) {
    //                         var opts = {
    //                             header: {
    //                                 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36',
    //                                 'Access-Control-Allow-Origin': '*',
    //                                 'Access-Control-Allow-Methods': 'GET',
    //                                 'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept'
    //                             },
    //                             method: 'GET',
    //                             crossdomain: true,
    //                             mode: 'cors'
    //                         }
    //                         const response = await fetch(`https://simbad.u-strasbg.fr/simbad/sim-id?Ident=${starName}&output.format=ASCII`, opts);
    //                         const data = await response.text();
    //                         console.log(data);
    //                         return data;
    //                     }

    //                     function parseSimbadData(data) {
    //                         // Initialize variables to store extracted data
    //                         let galCoords = "Data not found";
    //                         let icrsCoords = "Data not found";
    //                         let ra = "Data not found";
    //                         let dec = "Data not found";
    //                         let raDec = "Data not found";
    //                         let parallaxDistance = "Data not found";
    //                         let parallaxError = "";
    //                         let spectralType = "Data not found";
    //                         let spectralTypeExplanation = "Spectral type information not available.";

    //                         // Extracting Galactic coordinates, parallax distance, parallax error, and spectral type
    //                         const galCoordsMatch = data.match(/Coordinates\(Gal,ep=J2000,eq=2000\): ([+-]?(?=\.\d|\d)(?:\d+)?(?:\.?\d*))(?:[Ee]([+-]?\d+))?  ([+-]?(?=\.\d|\d)(?:\d+)?(?:\.?\d*))(?:[Ee]([+-]?\d+))?/);
    //                         if (galCoordsMatch) {
    //                             const l = parseFloat(galCoordsMatch[1]);
    //                             const b = parseFloat(galCoordsMatch[3]);
                                
    //                             galCoords = `l = ${l.toFixed(5)}, b = ${b > 0 ? "+" : ""}${b.toFixed(5)}`;
    //                             // icrsCoords = `RA = ${ra.toFixed(5)}°, Dec = ${dec.toFixed(5)} h`;
    //                         }

    //                         const raDecMatch = data.match(/Coordinates\(ICRS,ep=J2000,eq=2000\): (([+-]?(?=\.\d|\d)(?:\d+)?(?:\.?\d*))(?:[Ee]([+-]?\d+))?( ([+-]?(?=\.\d|\d)(?:\d+)?(?:\.?\d*))(?:[Ee]([+-]?\d+))?)+)  (([+-]?(?=\.\d|\d)(?:\d+)?(?:\.?\d*))(?:[Ee]([+-]?\d+))?( ([+-]?(?=\.\d|\d)(?:\d+)?(?:\.?\d*))(?:[Ee]([+-]?\d+))?)+)/);
    //                         console.log(raDecMatch[1]);
    //                         console.log(raDecMatch[2]);
    //                         console.log(raDecMatch[7]);
    //                         console.log(raDecMatch);
    //                         let ras = raDecMatch[1].split(" ");
    //                         for (let i = 0; i < ras.length; i++) {
    //                             ras[i] = parseFloat(ras[i]);
    //                         }
    //                         ra = `${ras[0].toFixed(0)} h ${ras[1].toFixed(0)} m ${ras[2].toFixed(3)} s`;
    //                         let decs = raDecMatch[7].split(" ");
    //                         for (let i = 0; i < decs.length; i++) {
    //                             decs[i] = parseFloat(decs[i]);
    //                         }
    //                         dec = `${decs[0].toFixed(0)}° ${decs[1].toFixed(0)}' ${decs[2].toFixed(3)}"`;
    //                         // if (raDecMatch) {
    //                         //     const raValue = parseFloat(raDecMatch[1]);
    //                         //     const raErr = parseFloat(raDecMatch[2]);
    //                         //     const decValue = parseFloat(raDecMatch[9]);
    //                         //     const decErr = parseFloat(raDecMatch[10]);
    //                         //     ra = raValue;
    //                         //     dec = decValue;
    //                         //     raDec = `RA = ${raValue.toFixed(5)}° ± ${raErr.toFixed(5)}°, Dec = ${decValue.toFixed(5)}° ± ${decErr.toFixed(5)}°`;
    //                         // }

    //                         const parallaxMatch = data.match(/Parallax: (\d+\.\d+) \[(\d+\.\d+)\]/);
    //                         if (parallaxMatch) {
    //                             const parallaxValue = parseFloat(parallaxMatch[1]);
    //                             const parallaxErr = parseFloat(parallaxMatch[2]);
    //                             parallaxDistance = (1 / (0.001 * parallaxValue) * 3.2615).toFixed(3); // Conversion to light years
    //                             parallaxError = `± ${((parallaxErr / 1000) * parallaxDistance).toFixed(3)}`;
    //                         }

    //                         const spectralTypeMatch = data.match(/Spectral type: ([A-Z0-9]+)/);
    //                         if (spectralTypeMatch) {
    //                             const spectralTypeValue = spectralTypeMatch[1];
    //                             spectralType = spectralTypeValue;

    //                             // Explanation of spectral type
    //                             switch (spectralTypeValue.charAt(0)) {
    //                                 case "O":
    //                                     spectralTypeExplanation = "O-type stars are extremely hot and blue, with high temperatures and strong ionized helium lines.";
    //                                     break;
    //                                 case "B":
    //                                     spectralTypeExplanation = "B-type stars are hot and blue, with prominent helium lines and some hydrogen lines.";
    //                                     break;
    //                                 case "A":
    //                                     spectralTypeExplanation = "A-type stars are white or bluish-white, with strong hydrogen lines and ionized metals.";
    //                                     break;
    //                                 case "F":
    //                                     spectralTypeExplanation = "F-type stars are white, with prominent hydrogen lines and ionized calcium lines.";
    //                                     break;
    //                                 case "G":
    //                                     spectralTypeExplanation = "G-type stars, like the Sun, are yellowish-white, with strong hydrogen and ionized calcium lines.";
    //                                     break;
    //                                 case "K":
    //                                     spectralTypeExplanation = "K-type stars are orange or reddish, with strong neutral metal lines and molecular bands.";
    //                                     break;
    //                                 case "M":
    //                                     spectralTypeExplanation = "M-type stars are red, with strong molecular bands and lines of neutral metals.";
    //                                     break;
    //                                 default:
    //                                     spectralTypeExplanation = "Spectral type information not available.";
    //                             }
    //                         }

    //                         // Format the extracted data for display
    //                         const formattedContent = `
    //                             <h2>${star_list[i + j]}</h2>
    //                             <p><strong>Galactic Coordinates:</strong> ${galCoords}</p>
    //                             <p><strong>Right Ascension:</strong> ${ra}</p>
    //                             <p><strong>Declination:</strong> ${dec}</p>
    //                             <p><strong>Parallax Distance:</strong> ${parallaxDistance} ${parallaxError} light years</p>
    //                             <p><strong>Spectral Type:</strong> ${spectralType}</p>
    //                             <p>${spectralTypeExplanation}</p>
    //                             <br>
    //                             <a href="./${star_list[i + j]}.jpg" title="./${star_list[i + j]}.jpg" target="_blank" rel="noreferer noopener"><button type="button" class="btn btn-primary"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-download" viewBox="0 0 16 16">
    // <path d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5z"/>
    // <path d="M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3z"/>
    // </svg> Download ${star_list[i + j]}.jpg</button></a>
    //                         `;

    //                         return formattedContent;
    //                     }
    //                     let modal = document.createElement('div');
    //                     modal.classList.add('modal', 'fade');
    //                     modal.id = 'exampleModal' + star_list[i + j].replace(" ", "").replace("'", "");
    //                     modal.tabIndex = '-1';
    //                     modal.setAttribute('aria-labelledby', 'exampleModalLabel');
    //                     modal.setAttribute('aria-hidden', 'true');

    //                     modal.innerHTML = `
    //                         <div class="modal-dialog modal-dialog-scrollable">
    //                             <div class="modal-content">
    //                                 <div class="modal-header">
    //                                     <h5 class="modal-title" id="exampleModalLabel">${star_list[i + j]}</h5>
    //                                     <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
    //                                 </div>
    //                                 <div class="modal-body">
    //                                     <p>Modal body text goes here.</p>
    //                                 </div>
    //                                 <div class="modal-footer">
    //                                     <p>Data provided by SIMBAD/DSS2.</p>
    //                                 </div>
    //                             </div>
    //                         </div>
    //                     `;
    //                     document.body.appendChild(modal);
    //                     // Make it so that when the button is clicked the modal pops up
    //                     // button.setAttribute('data-bs-toggle', 'modal');
    //                     // button.setAttribute('data-bs-target', '#exampleModal' + star_list[i + j].replace(" ", "").replace("'", ""));
    //                     button.addEventListener('click', async () => {
    //                         // Fetch the SIMBAD data
    //                         const simbadData = await fetchSimbadData(star_list[i + j]);
    //                         // Parse the SIMBAD data
    //                         const formattedData = parseSimbadData(simbadData);

    //                         // Find the specific modal related to the clicked button
    //                         const modalId = 'exampleModal' + star_list[i + j].replace(/[\s']/g, "");
    //                         const modalElement = document.getElementById(modalId);
    //                         const modalBodyElement = modalElement.querySelector('.modal-body');
                            
    //                         // Update modal content with the formatted SIMBAD data
    //                         modalBodyElement.innerHTML = formattedData;

    //                         // Show the modal
    //                         let getModal = new bootstrap.Modal(modalElement);
    //                         getModal.show();
    //                     });
    //                     col.classList.add('col');
    //                     let img = document.createElement('img');
    //                     img.src = star_list[i + j] + '.jpg';
    //                     img.alt = star_list[i + j];
    //                     img.classList.add('img-fluid');
    //                     img.style.width = '100%';
    //                     let p = document.createElement('p');
    //                     p.classList.add('text-center');
    //                     p.innerText = star_list[i + j];
    //                     p.style.marginTop = '10px';
    //                     p.style.fontFamily = 'monospace';
    //                     p.style.fontSize = '1.5rem';
    //                     col.appendChild(button);
    //                     button.appendChild(img);
    //                     button.appendChild(p);
    //                     row.appendChild(col);
    //                 } else if (i + j >= star_list.length) {
    //                     let col = document.createElement('div');
    //                     col.classList.add('col');
    //                     row.appendChild(col);
    //                 }
    //                 if (j == 2) {
    //                     row.classList.add('mb-4');
    //                 }
    //             }
    //             images.appendChild(row);
    //         }
            // For computer or mobile
            for (let i = 0; i < star_list.length; i += (window.mobileCheck() ? 1 : 3)) {
                let row = document.createElement('div');
                row.classList.add('row');
                for (let j = 0; j < (window.mobileCheck() ? 1 : 3); j++) {
                    if (i + j < star_list.length) {
                        let col = document.createElement('div');
                        let button = document.createElement('button');
                        button.id = 'div' + star_list[i + j].replace(" ", "").replace("'", "");
                        button.style.backgroundColor = 'transparent';
                        button.style.border = 'none';
                        // Function to fetch data from the SIMBAD database based on star name
                        async function fetchSimbadData(starName) {
                            if (window.mobileCheck()) {
                                console.log(`https://api.allorigins.win/get?url=${encodeURIComponent(`https://simbad.u-strasbg.fr/simbad/sim-id?Ident=${star_list[i + j]}&output.format=ASCII`)}`)
                                const response = await fetch(`https://api.allorigins.win/get?url=${encodeURIComponent(`https://simbad.u-strasbg.fr/simbad/sim-id?Ident=${star_list[i + j]}&output.format=ASCII`)}`);
                                const data = await response.json();
                                return data.contents;
                            } else {
                                const response = await fetch(`http://simbad.u-strasbg.fr/simbad/sim-id?Ident=${starName}&output.format=ASCII`);
                                const data = await response.text();
                                return data;
                            }
                        }

                        function parseSimbadData(data) {
                            // Initialize variables to store extracted data
                            let galCoords = "Data not found";
                            let icrsCoords = "Data not found";
                            let ra = "Data not found";
                            let dec = "Data not found";
                            let raDec = "Data not found";
                            let parallaxDistance = "Data not found";
                            let parallaxError = "";
                            let spectralType = "Data not found";
                            let spectralTypeExplanation = "Spectral type information not available.";

                            // Extracting Galactic coordinates, parallax distance, parallax error, and spectral type
                            const galCoordsMatch = data.match(/Coordinates\(Gal,ep=J2000,eq=2000\): ([+-]?(?=\.\d|\d)(?:\d+)?(?:\.?\d*))(?:[Ee]([+-]?\d+))?  ([+-]?(?=\.\d|\d)(?:\d+)?(?:\.?\d*))(?:[Ee]([+-]?\d+))?/);
                            if (galCoordsMatch) {
                                const l = parseFloat(galCoordsMatch[1]);
                                const b = parseFloat(galCoordsMatch[3]);
                                
                                galCoords = `l = ${l.toFixed(5)}, b = ${b > 0 ? "+" : ""}${b.toFixed(5)}`;
                                // icrsCoords = `RA = ${ra.toFixed(5)}°, Dec = ${dec.toFixed(5)} h`;
                            }

                            const raDecMatch = data.match(/Coordinates\(ICRS,ep=J2000,eq=2000\): (([+-]?(?=\.\d|\d)(?:\d+)?(?:\.?\d*))(?:[Ee]([+-]?\d+))?( ([+-]?(?=\.\d|\d)(?:\d+)?(?:\.?\d*))(?:[Ee]([+-]?\d+))?)+)  (([+-]?(?=\.\d|\d)(?:\d+)?(?:\.?\d*))(?:[Ee]([+-]?\d+))?( ([+-]?(?=\.\d|\d)(?:\d+)?(?:\.?\d*))(?:[Ee]([+-]?\d+))?)+)/);
                            console.log(raDecMatch[1]);
                            console.log(raDecMatch[2]);
                            console.log(raDecMatch[7]);
                            console.log(raDecMatch);
                            let ras = raDecMatch[1].split(" ");
                            for (let i = 0; i < ras.length; i++) {
                                ras[i] = parseFloat(ras[i]);
                            }
                            ra = `${ras[0].toFixed(0)} h ${ras[1].toFixed(0)} m ${ras[2].toFixed(3)} s`;
                            let decs = raDecMatch[7].split(" ");
                            for (let i = 0; i < decs.length; i++) {
                                decs[i] = parseFloat(decs[i]);
                            }
                            dec = `${decs[0].toFixed(0)}° ${decs[1].toFixed(0)}' ${decs[2].toFixed(3)}"`;
                            // if (raDecMatch) {
                            //     const raValue = parseFloat(raDecMatch[1]);
                            //     const raErr = parseFloat(raDecMatch[2]);
                            //     const decValue = parseFloat(raDecMatch[9]);
                            //     const decErr = parseFloat(raDecMatch[10]);
                            //     ra = raValue;
                            //     dec = decValue;
                            //     raDec = `RA = ${raValue.toFixed(5)}° ± ${raErr.toFixed(5)}°, Dec = ${decValue.toFixed(5)}° ± ${decErr.toFixed(5)}°`;
                            // }

                            const parallaxMatch = data.match(/Parallax: (\d+\.\d+) \[(\d+\.\d+)\]/);
                            if (parallaxMatch) {
                                const parallaxValue = parseFloat(parallaxMatch[1]);
                                const parallaxErr = parseFloat(parallaxMatch[2]);
                                parallaxDistance = (1 / (0.001 * parallaxValue) * 3.2615).toFixed(3); // Conversion to light years
                                parallaxError = `± ${((parallaxErr / 1000) * parallaxDistance).toFixed(3)}`;
                            }

                            const spectralTypeMatch = data.match(/Spectral type: ([A-Z0-9]+)/);
                            if (spectralTypeMatch) {
                                const spectralTypeValue = spectralTypeMatch[1];
                                spectralType = spectralTypeValue;

                                // Explanation of spectral type
                                switch (spectralTypeValue.charAt(0)) {
                                    case "O":
                                        spectralTypeExplanation = "O-type stars are extremely hot and blue, with high temperatures and strong ionized helium lines.";
                                        break;
                                    case "B":
                                        spectralTypeExplanation = "B-type stars are hot and blue, with prominent helium lines and some hydrogen lines.";
                                        break;
                                    case "A":
                                        spectralTypeExplanation = "A-type stars are white or bluish-white, with strong hydrogen lines and ionized metals.";
                                        break;
                                    case "F":
                                        spectralTypeExplanation = "F-type stars are white, with prominent hydrogen lines and ionized calcium lines.";
                                        break;
                                    case "G":
                                        spectralTypeExplanation = "G-type stars, like the Sun, are yellowish-white, with strong hydrogen and ionized calcium lines.";
                                        break;
                                    case "K":
                                        spectralTypeExplanation = "K-type stars are orange or reddish, with strong neutral metal lines and molecular bands.";
                                        break;
                                    case "M":
                                        spectralTypeExplanation = "M-type stars are red, with strong molecular bands and lines of neutral metals.";
                                        break;
                                    default:
                                        spectralTypeExplanation = "Spectral type information not available.";
                                }
                            }

                            // Format the extracted data for display
                            const formattedContent = `
                                <h2>${star_list[i + j]}</h2>
                                <p><strong>Galactic Coordinates:</strong> ${galCoords}</p>
                                <p><strong>Right Ascension:</strong> ${ra}</p>
                                <p><strong>Declination:</strong> ${dec}</p>
                                <p><strong>Parallax Distance:</strong> ${parallaxDistance} ${parallaxError} light years</p>
                                <p><strong>Spectral Type:</strong> ${spectralType}</p>
                                <p>${spectralTypeExplanation}</p>
                                <br>
                                <a href="./${star_list[i + j]}.jpg" title="./${star_list[i + j]}.jpg" target="_blank" rel="noreferer noopener"><button type="button" class="btn btn-primary"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-download" viewBox="0 0 16 16">
    <path d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5z"/>
    <path d="M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3z"/>
    </svg> Download ${star_list[i + j]}.jpg</button></a>
                            `;

                            return formattedContent;
                        }
                        let modal = document.createElement('div');
                        modal.classList.add('modal', 'fade');
                        modal.id = 'exampleModal' + star_list[i + j].replace(" ", "").replace("'", "");
                        modal.tabIndex = '-1';
                        modal.setAttribute('aria-labelledby', 'exampleModalLabel');
                        modal.setAttribute('aria-hidden', 'true');

                        modal.innerHTML = `
                            <div class="modal-dialog modal-dialog-scrollable">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="exampleModalLabel">${star_list[i + j]}</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        <p>Modal body text goes here.</p>
                                    </div>
                                    <div class="modal-footer">
                                        <p>Data provided by SIMBAD/DSS2.</p>
                                    </div>
                                </div>
                            </div>
                        `;
                        document.body.appendChild(modal);
                        // Make it so that when the button is clicked the modal pops up
                        var buttonClick = function(starName) {
                            button.addEventListener('click', async () => {
                                console.log("I have been clicked.");
                                // Fetch the SIMBAD data
                                const simbadData = await fetchSimbadData(starName);
                                // Parse the SIMBAD data
                                const formattedData = parseSimbadData(simbadData);

                                // Find the specific modal related to the clicked button
                                const modalId = 'exampleModal' + starName.replace(/[\s']/g, "");
                                const modalElement = document.getElementById(modalId);
                                const modalBodyElement = modalElement.querySelector('.modal-body');
                                
                                // Update modal content with the formatted SIMBAD data
                                modalBodyElement.innerHTML = formattedData;

                                // Show the modal
                                let getModal = new bootstrap.Modal(modalElement);
                                getModal.show();
                            });
                        };
                        buttonClick(star_list[i + j]);
                        col.classList.add('col');
                        let img = document.createElement('img');
                        img.src = star_list[i + j] + '.jpg';
                        img.alt = star_list[i + j];
                        img.classList.add('img-fluid');
                        img.style.width = '100%';
                        let p = document.createElement('p');
                        p.classList.add('text-center');
                        p.innerText = star_list[i + j];
                        p.style.marginTop = '10px';
                        p.style.fontFamily = 'monospace';
                        p.style.fontSize = '1.5rem';
                        col.appendChild(button);
                        button.appendChild(img);
                        button.appendChild(p);
                        row.appendChild(col);
                    } else if (i + j >= star_list.length) {
                        let col = document.createElement('div');
                        col.classList.add('col');
                        row.appendChild(col);
                    }
                    if (j == 2) {
                        row.classList.add('mb-4');
                    }
                }
                images.appendChild(row);
            }
        // }
    </script>
</body>
</html>